{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Proper ordering of cards:\
\
Make a card class, because it would be easy to throw each of the cards into an array of "cards".\
\

\i So maybe\'85\
\
public class cards\
	\{\
	int cardValue;\
	int cardProcValue;\
	String suiteType;\
	String cardName;\
	\
	public cards()\
		\{\
		\}\
	\
	public cards(int cardNumber, String suiteIn)\
		\{\
		if (suiteIn == DIAMONDS || suiteIn == SPADES)\
			\{\
			cardvalue = cardNumber + 13;\
			\}\
		else	\{ cardValue = cardNumber; \}\
		suiteType = suiteIn;\
		\
		\}\
	\}\
\
________________________\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i0 \cf0 Int\
\
public deckOut()\
	\{\
	ArrayList<cards> cardArray = new ArrayList();\
	int deckCCycle = 1;\
	int totalCards = 52;\
	int maxPerSuite = 13;\
\
	while (deckCCycle <= totalCards)\
		\{\
		if (suiteCCycle == maxPerSuite)\
			\{ suiteCCycle = 1; \}\
		//all the code to make the cards as names and numbers goes here\
		deckCCycle++;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		suiteCCycle++;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\}\
	\}\
\
public String cardNameFromValue(int cardValue)\
	\{\
	String output = "";\
\
	switch (cardValue)\
		\{\
			case 1:\
				output = Ace;\
				break;\
			case 2:\
				output = "One";\
				break;\
			case 3:\
				output = "Two";\
				break;\
			case 4:\
				output = "Three";\
				break;\
			case 5:\
				output = "Four";\
				break;\
			case 6:\
				output = "Five";\
				break;\
			case 7:\
				output = "Six";\
				break;\
			case 8:\
				output = "Seven";\
				break;\
			case 9:\
				output = "Eight";\
				break;\
			case 10:\
				output = "Nine";\
				break;\
			case 11:\
				output = "Jack";\
				break;\
			case 12:\
				output = "Queen";\
				break;\
			case13:\
				output = "King";\
				break;\
		\}\
	return output;\
	\}}